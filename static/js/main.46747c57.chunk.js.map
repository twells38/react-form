{"version":3,"sources":["Form.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","state","username","handleChange","bind","handleSubmit","evt","this","setState","target","value","preventDefault","alert","className","onSubmit","htmlFor","type","id","onChange","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAqCeA,E,kDAlCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,SAAU,IACzB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,gDAMnB,SAAaE,GACXC,KAAKC,SAAS,CAAEN,SAAUI,EAAIG,OAAOC,U,0BAEvC,SAAaJ,GAEXA,EAAIK,iBACJC,MAAM,cAAD,OAAeL,KAAKN,MAAMC,WAC/BK,KAAKC,SAAS,CAAEN,SAAU,O,oBAE5B,WACE,OACE,sBAAKW,UAAU,OAAf,UACE,2CACA,uBAAMC,SAAUP,KAAKF,aAArB,UACE,uBAAOU,QAAQ,WAAf,uBACA,uBACEC,KAAK,OACLC,GAAG,WACHP,MAAOH,KAAKN,MAAMC,SAClBgB,SAAUX,KAAKJ,eAEjB,uD,GA5BSgB,aCWJC,E,4JATb,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJUM,aCSHE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.46747c57.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Form.css\";\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(evt) {\n    this.setState({ username: evt.target.value });\n  }\n  handleSubmit(evt) {\n    // look what in state\n    evt.preventDefault();\n    alert(`You typed: ${this.state.username}`);\n    this.setState({ username: \"\" });\n  }\n  render() {\n    return (\n      <div className=\"form\">\n        <h1>Form Demo</h1>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"username\">Username:</label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            value={this.state.username}\n            onChange={this.handleChange}\n          />\n          <button>Submit!</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/**\n <h1> Traditional Uncontrolled form</h1>\n <form id=\"myForm\">\n  <input name=\"username\" type=\"text\"/>\n  <button>Click Me</button>\n  </form>\n */\n/** js\n  $(\"#myForm\").submit(function(e){\n    e.preventDefault():\n    $('input[name=\"usrname\"]')  //grab data that we need from input then do something with it\n    alert(\"you enter: ${username}\")\n\n  })\n */\n/** in react has technique to get data from form this is  controlled components\n   Controlled Components\n   * in HTML, form elements such as <input>, <textarea> ans <select>\n   typically maintain their own state and update it based on ser input\n   * in React, mutable state is kept in the state of components,\n   and omly updated with setState()\n */\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}